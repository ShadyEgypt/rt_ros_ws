// Generated by gencpp from file assignment2_p1/GetLastTargetResponse.msg
// DO NOT EDIT!


#ifndef ASSIGNMENT2_P1_MESSAGE_GETLASTTARGETRESPONSE_H
#define ASSIGNMENT2_P1_MESSAGE_GETLASTTARGETRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace assignment2_p1
{
template <class ContainerAllocator>
struct GetLastTargetResponse_
{
  typedef GetLastTargetResponse_<ContainerAllocator> Type;

  GetLastTargetResponse_()
    : res_x(0.0)
    , res_y(0.0)
    , success(false)  {
    }
  GetLastTargetResponse_(const ContainerAllocator& _alloc)
    : res_x(0.0)
    , res_y(0.0)
    , success(false)  {
  (void)_alloc;
    }



   typedef double _res_x_type;
  _res_x_type res_x;

   typedef double _res_y_type;
  _res_y_type res_y;

   typedef uint8_t _success_type;
  _success_type success;





  typedef boost::shared_ptr< ::assignment2_p1::GetLastTargetResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::assignment2_p1::GetLastTargetResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetLastTargetResponse_

typedef ::assignment2_p1::GetLastTargetResponse_<std::allocator<void> > GetLastTargetResponse;

typedef boost::shared_ptr< ::assignment2_p1::GetLastTargetResponse > GetLastTargetResponsePtr;
typedef boost::shared_ptr< ::assignment2_p1::GetLastTargetResponse const> GetLastTargetResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::assignment2_p1::GetLastTargetResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::assignment2_p1::GetLastTargetResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::assignment2_p1::GetLastTargetResponse_<ContainerAllocator1> & lhs, const ::assignment2_p1::GetLastTargetResponse_<ContainerAllocator2> & rhs)
{
  return lhs.res_x == rhs.res_x &&
    lhs.res_y == rhs.res_y &&
    lhs.success == rhs.success;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::assignment2_p1::GetLastTargetResponse_<ContainerAllocator1> & lhs, const ::assignment2_p1::GetLastTargetResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace assignment2_p1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::assignment2_p1::GetLastTargetResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::assignment2_p1::GetLastTargetResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::assignment2_p1::GetLastTargetResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::assignment2_p1::GetLastTargetResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::assignment2_p1::GetLastTargetResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::assignment2_p1::GetLastTargetResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::assignment2_p1::GetLastTargetResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0ebb5834b8c26bdafec4fae016a36fe6";
  }

  static const char* value(const ::assignment2_p1::GetLastTargetResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0ebb5834b8c26bdaULL;
  static const uint64_t static_value2 = 0xfec4fae016a36fe6ULL;
};

template<class ContainerAllocator>
struct DataType< ::assignment2_p1::GetLastTargetResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "assignment2_p1/GetLastTargetResponse";
  }

  static const char* value(const ::assignment2_p1::GetLastTargetResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::assignment2_p1::GetLastTargetResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Response part\n"
"float64 res_x\n"
"float64 res_y\n"
"bool success       # True if operation was successful\n"
"\n"
;
  }

  static const char* value(const ::assignment2_p1::GetLastTargetResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::assignment2_p1::GetLastTargetResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.res_x);
      stream.next(m.res_y);
      stream.next(m.success);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetLastTargetResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::assignment2_p1::GetLastTargetResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::assignment2_p1::GetLastTargetResponse_<ContainerAllocator>& v)
  {
    s << indent << "res_x: ";
    Printer<double>::stream(s, indent + "  ", v.res_x);
    s << indent << "res_y: ";
    Printer<double>::stream(s, indent + "  ", v.res_y);
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ASSIGNMENT2_P1_MESSAGE_GETLASTTARGETRESPONSE_H
